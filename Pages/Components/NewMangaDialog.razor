@using Newtonsoft.Json.Linq
@using Newtonsoft.Json
@using Database
@using Backend
@using Lexi.Pages.Components.MangaFolder
@using static Mangas.DataManga;
@using ElectronNET.API
@using ElectronNET.API.Entities
@using System.Web

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IDatabase database
@inject IBackend backend
@inject IDialogService DialogService

<MudGrid Style="padding: 15px">
    <MudItem xs="6">
        <MudTextField @bind-Value="name" Label="Name" Variant="Variant.Outlined"></MudTextField>
    </MudItem>
    <MudItem xs="6">
        <MudSelect @bind-Value="@language" @onchange="@(()=>Console.WriteLine(language))" Label="Language" Variant="Variant.Outlined" OffsetY="true">

            @foreach (var lang in backend.GetLanguageFlags())
            {
                <MudSelectItem Value="@(String.Concat(lang.Key[0].ToString().ToUpper(),lang.Key.AsSpan(1)))">
                    
                    <MudGrid style="display: flex">
                                        <MudItem xs="1">
                                            <img height="14" class="mr-1" src="@($"src/flags/4x3/{lang.Value}")"/>
                                        </MudItem>
                                        <MudItem xs="6">
                                        <p>@(String.Concat(lang.Key[0].ToString().ToUpper(),lang.Key.AsSpan(1)))</p>
                                        </MudItem>
                                    </MudGrid>
                </MudSelectItem>
            }
            
        </MudSelect>
    </MudItem>

    <MudItem xs="12">
        <MudTextField @bind-Value="baseurl" Label="Baseurl" Variant="Variant.Outlined"></MudTextField>
    </MudItem>
    
    <MudItem xs="12" Style="display: flex">
        <MudTextField @bind-Value="cover" Label="Cover url" Variant="Variant.Outlined"></MudTextField>
        <MudIconButton Icon="@Icons.Filled.Search" OnClick="@OpenSearchCover"></MudIconButton>
    </MudItem>
    
    <MudItem xs="12">
        <div style="display: flex">
            <MudButton OnClick="Cancel" Color="Color.Error" Style="margin-right: 15px">Cancel</MudButton>
            <MudButton OnClick="Okay" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary"  Size="MudBlazor.Size.Large">Add</MudButton>
        </div>
    </MudItem>
</MudGrid>

@code{

    [CascadingParameter] MudDialogInstance dialog { get; set; }
    public String name;
    public String baseurl;
    public String cover;
    public string language = "Portuguese";
    
    protected override void OnInitialized()
    {
        //database.SetLocalStorage(localStorage);
        base.OnInitialized();
    }

    async void OpenSearchCover()
    {
        var query = new string(name + " cover").Replace(" ", "+");
        try
        {
            BrowserWindowOptions ops = new BrowserWindowOptions() {Width = 1000, Height = 700, AutoHideMenuBar = true, Title = "Lexi - Search cover image"};
            var win = await Electron.WindowManager.CreateWindowAsync(ops,$"https://www.bing.com/images/search?q={query}");
            win.OnClose += async () =>
            {

                var url = await win.WebContents.GetUrl(); //gets window current bing url
                var splited = url.Split("mediaurl="); //parameter in bing url that leads to img source url
                var final = HttpUtility.UrlDecode(splited[1].Substring(0, splited[1].IndexOf("&"))); //treats the url to get the right source
                Console.WriteLine(url);
                Console.WriteLine("----");
                Console.WriteLine(final);
                cover = final;

            };
            await InvokeAsync(() => StateHasChanged());

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    async void Okay()
    {
        //
        // //reads from DB and checks if list of mangas exists, if it does not, creates a new list
        // List<Mangas.DataManga> listMangas = await localStorage.GetItemAsync<List<Mangas.DataManga>>("mangas") ?? new List<Mangas.DataManga>();
        //
        // //appends the new manga to the database variable and serializes it
        // //await database.Write(name, listMangas.Append(new Mangas.DataManga(name,baseurl,cover)));
        // await localStorage.SetItemAsync("mangas", listMangas.Append());

        Language lang = new Language(language, backend.GetLanguageFlags()[language.ToLower()]);
        
        database.SaveManga(new Mangas.DataManga(name, baseurl, cover, lang=lang));

        dialog.Close(DialogResult.Ok(true)); //closes the dialog with result OK
    }
    void Cancel() => dialog.Close(DialogResult.Cancel());


}