@page "/mangas/{id}/"
@using static Mangas
@using InputType = MudBlazor.InputType
@using Database
@using ElectronNET.API
@using ElectronNET.API.Entities
@using Backend
@inject ILocalStorageService localStorage
@inject IDatabase db
@inject IBackend backend

<MudTextField AutoFocus="false" DisableUnderLine="true" Style="font-size: 47px" TextChanged="@SafeSave" @bind-Value="@manga.name"></MudTextField>


<div style="width: 100%; margin-top: 20px; display: grid; grid-template-columns: 1fr 2fr; margin-bottom: 10px">
    <div>
        <img src="@manga.cover" style="width: 90%; box-shadow: 2px 4px 6px rgba(0,0,0,0.4)"/>
        <div style="display: flex">
            <MudTooltip Text="To enable fast download, please download at least once." Placement="Placement.End" Delayed="1">
                <MudButton EndIcon="@Icons.Filled.FlashOn" Variant="Variant.Filled" Size="MudBlazor.Size.Large" Disabled="@fastdownload" Color="Color.Primary">Fast Download</MudButton>
            </MudTooltip>

            @if (manga.Idiom != null)
            {
            <MudItem xs="6" Style="margin-left: 10px">
                    <MudSelect @bind-Value="@manga.Idiom.Name"  Label="Language" Margin="Margin.Dense" OffsetY="true">
            
                        @foreach (var lang in backend.GetLanguageFlags())
                        {
                            <MudSelectItem Value="@(String.Concat(lang.Key[0].ToString().ToUpper(),lang.Key.AsSpan(1)))">
                                
                                <MudGrid style="display: flex">
                                                    <MudItem xs="1">
                                                        <img height="14" class="mr-1" src="@($"src/flags/4x3/{lang.Value}")"/>
                                                    </MudItem>
                                                    <MudItem xs="6">
                                                    <p>@(String.Concat(lang.Key[0].ToString().ToUpper(),lang.Key.AsSpan(1)))</p>
                                                    </MudItem>
                                                </MudGrid>
                            </MudSelectItem>
                        }
                        
                    </MudSelect>
                </MudItem>
                
            }
        </div>
                
    </div>
    <div>
        <MudText Typo="Typo.h5">Last read: @manga.lastread</MudText>
        <MudTextField Label="Base Url" Style="width: 70%" TextChanged="@BaseUrlChanged" @bind-Value="@manga.baseurl" InputType="InputType.Text" T="string"></MudTextField>
        @if (!volumeOK)
        {
            <MudAlert Style="margin-top:10px; width: 70%" Severity="Severity.Error">Volume parameter must be set!</MudAlert>
        }

        @if (!pageOK)
        {
            <MudAlert Style="margin-top:10px;width: 70%" Severity="Severity.Error">Page parameter must be set!</MudAlert>
        }
        <br/>
        <MudTextField Style="width: 70%" Label="Cover Url" TextChanged="@(() => db.SaveManga(manga))" @bind-Value="@manga.cover" InputType="InputType.Text" T="string"></MudTextField>
        <br/>
        <MudItem Style="display: flex">
            <MudItem xs="2" Style="margin-right: 10px; margin-bottom: 20px">
                <MudTextField Label="Volume" @bind-Value="@download_volume" TextChanged="@SafeSave" Variant="Variant.Outlined" Margin="Margin.Dense" T="int" InputType="InputType.Number" Style="text-align: center"></MudTextField>
            </MudItem>

            <MudItem>
                <MudTooltip Text="@($"Download chapter {download_volume}")">
                    <MudButton EndIcon="@Icons.Filled.FileDownload" Disabled="@(!pageOK || !volumeOK)" OnClick="@Download" Variant="Variant.Filled" Size="MudBlazor.Size.Large" Color="Color.Primary">Download</MudButton>
                </MudTooltip>
            </MudItem>


            <MudItem>
                <MudTooltip Text=@(manga.download_folder == "" ? "Select output path" : "Current output path " + manga.download_folder)>
                    <MudIconButton OnClick="@OpenDialog" Icon="@Icons.Filled.FolderOpen"></MudIconButton>
                </MudTooltip>

            </MudItem>
            <MudItem>
                <MudTooltip Text="Preview pages">
                    <MudIconButton OnClick="@Preview" Icon="@Icons.Filled.Preview"></MudIconButton>
                </MudTooltip>
            </MudItem>
        </MudItem>
        <div style="width: 70%">
            <MudExpansionPanels Elevation="3">
                <MudExpansionPanel Style="width: 70%" IsExpanded="true">
                    <TitleContent>
                        <div class="d-flex" style="width: 70%">
                            <MudIcon Icon="@Icons.Material.Filled.Settings" class="mr-3"></MudIcon>
                            <MudText><strong>Download Options</strong></MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudGrid>

                            <MudItem xs="3" Style="min-width: 120px">
                                <MudTextField HelperText="Ex: 0-100" TextChanged="@SafeSave" @bind-Value="@manga.download_PageRange" Label="Page range" T="string" Style="text-align: center"></MudTextField>
                            </MudItem>

                            <MudItem xs="3" Style="min-width: 120px">
                                <MudTextField HelperText="Ex: 2" TextChanged="@SafeSave" @bind-Value="@manga.download_Repeat" Label="Repeat" T="string" Style="text-align: center"></MudTextField>
                            </MudItem>

                            <MudItem xs="3" Style="min-width: 120px">
                                <MudTextField HelperText="Ex: scan-page" @bind-Value="@manga.img_class" TextChanged="@SafeSave" Label="Image class" T="string" Style="text-align: center"></MudTextField>
                            </MudItem>

                            <MudItem xs="4" Style="min-width: 180px">
                                <MudTextField HelperText="Ex: D3" @bind-Value="@manga.img_NumberFormat" TextChanged="@SafeSave" Label="Page Number Format" T="string" Style="text-align: center"></MudTextField>
                            </MudItem>

                            <MudItem xs="4" Style="min-width: 180px">
                                <MudTextField HelperText="Ex: D2" @bind-Value="@manga.volume_NumberFormat" TextChanged="@SafeSave" Label="Volume Number Format" T="string" Style="text-align: center"></MudTextField>
                            </MudItem>

                            <MudItem >
                                <MudButton StartIcon="@Icons.Filled.SettingsApplications" OnClick="@AdvancedSetting">Advanced</MudButton>
                            </MudItem>

                        </MudGrid>
                    </ChildContent>
                </MudExpansionPanel>

                <MudExpansionPanel Style="width: 70%" IsExpanded="false">
                    <TitleContent>
                        <div class="d-flex" style="width: 70%">
                            <MudIcon Icon="@Icons.Material.Filled.Archive" class="mr-3"></MudIcon>
                            <MudText><strong>Downloaded Content</strong></MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        Panel Content
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </div>
    </div>
</div>


@code{

    [Parameter]
    public string id { get; set; } = "";

    bool fastdownload = true;
    bool volumeOK = false;
    bool pageOK = false;

    int download_volume = 0;
    
    public DataManga manga = new DataManga();
    

    async void BaseUrlChanged()
    {
        if (manga.baseurl.ToLower().Contains("[volume]"))
        {
            volumeOK = true;
            await InvokeAsync(StateHasChanged);
        }
        else volumeOK = false;
        if (manga.baseurl.ToLower().Contains("[page]"))
        {
            pageOK = true;
            await InvokeAsync(StateHasChanged);
        }
        else pageOK = false;

        db.SaveManga(manga);

    }

    async void Download()
    {
        manga.lastread = download_volume;
        backend.DownloadManga(manga, download_volume.ToString());
        manga.lastread = manga.lastread+int.Parse(manga.download_Repeat ?? "1");
        SafeSave();
    }

    void Preview()
    {
        // BrowserWindowOptions ops = new BrowserWindowOptions() {Width = 1000, Height = 700, AutoHideMenuBar = true, Title = "Lexi"};
        // var win = Electron.WindowManager.CreateWindowAsync(ops,$"http://localhost:{BridgeSettings.WebPort}/mangas/settings/{manga.id}");
    }

    void AdvancedSetting()
    {
        BrowserWindowOptions ops = new BrowserWindowOptions() {Width = 1000, Height = 700, AutoHideMenuBar = true, Title = "Lexi"};
        var win = Electron.WindowManager.CreateWindowAsync(ops,$"http://localhost:{BridgeSettings.WebPort}/mangas/settings/{manga.id}");
    }
    

    async void SafeSave()
    {
        db.SaveManga(manga);
        await InvokeAsync(() => StateHasChanged());
    }

    async void OpenDialog()
    {
        var mainWindow = Electron.WindowManager.BrowserWindows.First();
        var options = new OpenDialogOptions
        {
            Properties = new OpenDialogProperty[] {
                OpenDialogProperty.openDirectory
            }
        };
        string path = Electron.Dialog.ShowOpenDialogAsync(mainWindow, options).Result[0];
        manga.download_folder = path;
        db.SaveManga(manga);
    }

    //void CoverUrlChanged() => Save();
    

    protected override async void OnInitialized()
    {
        db.SetLocalStorage(localStorage);
        manga = await db.GetManga(id ?? "00000000000");
        download_volume = manga.lastread;
        Console.WriteLine(manga.Idiom.Flag);
        await InvokeAsync(() => StateHasChanged());
        base.OnInitialized();
    }

}